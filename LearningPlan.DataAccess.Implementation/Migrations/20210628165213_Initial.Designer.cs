// <auto-generated />
using System;
using LearningPlan.DataAccess.Implementation;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LearningPlan.DataAccess.Implementation.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20210628165213_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LearningPlan.DomainModel.AreaTopic", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlanAreaId")
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PlanAreaId");

                    b.ToTable("AreaTopics");

                    b.HasAnnotation("Cosmos:ContainerName", "AreaTopics");

                    b.HasAnnotation("Cosmos:PartitionKeyName", "PlanAreaId");
                });

            modelBuilder.Entity("LearningPlan.DomainModel.BotSubscription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("BotSubscriptions");

                    b.HasAnnotation("Cosmos:ContainerName", "BotSubscriptions");

                    b.HasAnnotation("Cosmos:PartitionKeyName", "ChatId");
                });

            modelBuilder.Entity("LearningPlan.DomainModel.Plan", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Plans");

                    b.HasAnnotation("Cosmos:ContainerName", "Plans");

                    b.HasAnnotation("Cosmos:PartitionKeyName", "Id");
                });

            modelBuilder.Entity("LearningPlan.DomainModel.PlanArea", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlanId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("PlanAreas");

                    b.HasAnnotation("Cosmos:ContainerName", "PlanAreas");

                    b.HasAnnotation("Cosmos:PartitionKeyName", "PlanId");
                });

            modelBuilder.Entity("LearningPlan.DomainModel.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<byte[]>("Salt")
                        .HasColumnType("bytea");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");

                    b.HasAnnotation("Cosmos:ContainerName", "Users");

                    b.HasAnnotation("Cosmos:PartitionKeyName", "Id");
                });

            modelBuilder.Entity("LearningPlan.DomainModel.AreaTopic", b =>
                {
                    b.HasOne("LearningPlan.DomainModel.PlanArea", "PlanArea")
                        .WithMany("AreaTopics")
                        .HasForeignKey("PlanAreaId");
                });

            modelBuilder.Entity("LearningPlan.DomainModel.BotSubscription", b =>
                {
                    b.HasOne("LearningPlan.DomainModel.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LearningPlan.DomainModel.PlanArea", b =>
                {
                    b.HasOne("LearningPlan.DomainModel.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId");
                });
#pragma warning restore 612, 618
        }
    }
}
